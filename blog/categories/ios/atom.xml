<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | i-chou's tech blog]]></title>
  <link href="i-chou.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="i-chou.com/"/>
  <updated>2014-01-06T17:50:54+08:00</updated>
  <id>i-chou.com/</id>
  <author>
    <name><![CDATA[i-chou]]></name>
    <email><![CDATA[ios_develop@me.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS Define for Coding Faster]]></title>
    <link href="i-chou.com/blog/2013/12/30/ios-define-for-coding-faster/"/>
    <updated>2013-12-30T16:11:06+08:00</updated>
    <id>i-chou.com/blog/2013/12/30/ios-define-for-coding-faster</id>
    <content type="html"><![CDATA[<p>以下是我在开发中常用的可以提高开发效率的宏</p>

<pre><code>/* fast make */

#define ccp(__X__,__Y__)             CGPointMake(__X__,__Y__)

#define ccs(__W__,__H__)             CGSizeMake(__W__,__H__)

#define ccr(__X__,__Y__,__W__,__H__) CGRectMake(__X__,__Y__,__W__,__H__)


/* fast creation */

#define IMG(name)       [UIImage imageNamed:(name)]

#define IMG_VIEW(name)  [[UIImageView alloc] initWithImage:[UIImage imageNamed:(name)]]

#define LocalStr(key)   NSLocalizedString(key,key)

#define SFONT(size)     [UIFont systemFontOfSize:(size)]

#define FONT(s)         [UIFont fontWithName:@"Arial" size:(s)]

#define BFONT(size)     [UIFont boldSystemFontOfSize:(size)]

#define BUNDLE(name)    [[NSBundle mainBundle] pathForResource:(name)]

#define URL(url)        [NSURL URLWithString:url]


/* fast appending */

#define ADD(__x__, __y__) [__x__ stringByAppendingString:__y__]


/* iOS_Version */

#define IS_IOS7 ((floor(NSFoundationVersionNumber) &gt; NSFoundationVersionNumber_iOS_6_1))


/* Components size */

#define SCREEN_WIDTH         [[UIScreen mainScreen] bounds].size.width

#define SCREEN_HEIGHT        [[UIScreen mainScreen] bounds].size.height

#define NAV_BAR_HEIGHT       44

#define NAV_BAR_HEIGHT_IOS7  64

#define TOOL_BAR_HEIGHT      44

#define TAB_BAR_HEIGHT       49

#define STATUS_BAR_HEIGHT    20


/* current language */

#define CN 1

#define ENG 2

#define JAN 3


/* color helper */

#define COLORRGBA(c,a) [UIColor colorWithRed:((c&gt;&gt;16)&amp;0xFF)/255.0 \
                                   green:((c&gt;&gt;8)&amp;0xFF)/255.0   \
                                    blue:(c&amp;0xFF)/255.0        \
                                   alpha:a]

#define COLORRGB(c)    [UIColor colorWithRed:((c&gt;&gt;16)&amp;0xFF)/255.0 \
                                   green:((c&gt;&gt;8)&amp;0xFF)/255.0   \
                                    blue:(c&amp;0xFF)/255.0        \
                                   alpha:1.0]


/* log helper */

#define LOG_STR(str)     NSLog(@"%@", str)

#define LOG_INT(int)     NSLog(@"%d", int)

#define LOG_FLOAT(float) NSLog(@"%f", float)

#define LOG_ERROR(exception,reason) NSLog(@"function:%s | line:%d | exception:%@ | reason:%@",__func__, __LINE__,exception,reason)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unable to Process Application info.plist Validation at This Time Due to a General Error]]></title>
    <link href="i-chou.com/blog/2013/12/30/unable-to-process-application-info-dot-plist-validation-at-this-time-due-to-a-general-error/"/>
    <updated>2013-12-30T11:59:26+08:00</updated>
    <id>i-chou.com/blog/2013/12/30/unable-to-process-application-info-dot-plist-validation-at-this-time-due-to-a-general-error</id>
    <content type="html"><![CDATA[<p>前几天美国圣诞放长假，往AppStore提交应用时提示28号以后才行。</p>

<p>今天提交前Validate时候遇到个问题，相信不止我一个人遇到，错误信息就是:</p>

<p><code>“Unable to process application info.plist validation at this time due to a general error.Please try again later.”</code></p>

<p><img src="/images/error.jpg"></p>

<!--![error image](error.jpg)-->


<p>如果你确信你的签名认证文件没有弄错，那么恭喜你，这个错误并不是本地错误，而是苹果服务器方面的错误，只需耐心等待即可。如果只等待不能满足你好动的本性，你就再review一遍吧，也许在review这段时间会有新的发现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Eclipse-Style ShortcutKey on Xcode]]></title>
    <link href="i-chou.com/blog/2013/12/29/use-eclipse-style-shortcutkey-on-xcode/"/>
    <updated>2013-12-29T13:51:56+08:00</updated>
    <id>i-chou.com/blog/2013/12/29/use-eclipse-style-shortcutkey-on-xcode</id>
    <content type="html"><![CDATA[<p>相信有一些小伙伴即使用着高大上的Xcode，也还是习惯用Eclipse的一些更亲民的快捷键。
那么就将搜集到的定制Eclipse快捷键的方法分享在这里，缺点是每次Xcode升级，需要重新配置，不过有些插件可以统一管理Xcode的配置文件和插件，这里就不讲了。</p>

<p>首先找到Xcode中的自带的配置文件
<code>/Applications/Xcode.app/Contents/Frameworks/IDEKit.framework/Versions/A/Resources/
IDETextKeyBindingSet.plist</code> 这个文件里配置了一些可以设置快捷键的操作, 使用常用的编辑器打开它（需要root权限）。</p>

<p>然后把这段配置</p>

<pre><code>&lt;key&gt;GDI Commands&lt;/key&gt;
    &lt;dict&gt;
        &lt;key&gt;GDI Duplicate Current Line&lt;/key&gt;
        &lt;string&gt;selectLine:, copy:, moveToEndOfLine:, insertNewline:, paste:, deleteBackward:&lt;/string&gt;
        &lt;key&gt;GDI Delete Current Line&lt;/key&gt;
        &lt;string&gt;moveToEndOfLine:, deleteToBeginningOfLine:, deleteBackward:, moveDown:, moveToEndOfLine:&lt;/string&gt;
        &lt;key&gt;GDI Move Current Line Up&lt;/key&gt;
        &lt;string&gt;selectLine:, cut:, moveUp:, moveToBeginningOfLine:, insertNewLine:, paste:, moveBackward:&lt;/string&gt;
        &lt;key&gt;GDI Move Current Line Down&lt;/key&gt;
        &lt;string&gt;selectLine:, cut:, moveDown:, moveToBeginningOfLine:, insertNewLine:, paste:, moveBackward:&lt;/string&gt;
        &lt;key&gt;GDI Insert Line Above&lt;/key&gt;
        &lt;string&gt;moveUp:, moveToEndOfLine:, insertNewline:&lt;/string&gt;
        &lt;key&gt;GDI Insert Line Below&lt;/key&gt;
        &lt;string&gt;moveToEndOfLine:, insertNewline:&lt;/string&gt;
    &lt;/dict&gt;
</code></pre>

<p>放到上面提到的<code>IDETextKeyBindingSet.plist</code>里，放在文件的最后的这两行之前：</p>

<pre><code>    &lt;/dict&gt;
&lt;/plist&gt;
</code></pre>

<p>配置解读：</p>

<p>key是名称，对应的string是对应的一组操作。</p>

<ul>
<li>GDI Duplicate Current Line 复制当前行到下面一行</li>
<li>GDI Delete Current Line 删除当前行</li>
<li>GDI Move Current Line Up 把当前行往上移动一行</li>
<li>GDI Move Current Line Down 把当前行往下移动一行</li>
<li>GDI Insert Line Above 在当前行上面增加一空行</li>
<li>GDI Insert Line Below 在当前行下面增加一空行（不管光标是否在行尾）</li>
</ul>


<p>copy以后重启Xcode，在Xcode菜单中，打开Preferences，选中Key Binding，在右上方搜索GDI, 会出现类似下图的显示，如果没有的话，请检查上面的每步操作。</p>

<p> <img src="/images/key_binding.png"></p>

<p>双击右边的空白处，就可以为每个功能设置不同的快捷键。</p>

<p>本文参考自：<a href="http://joeyio.com/2013/07/22/xcode_key_binding_like_eclipse/">Xcode自定义Eclipse中常用的快捷键</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIKit in Release Notes for iOS 7.1 Beta2]]></title>
    <link href="i-chou.com/blog/2013/12/17/uikit-in-release-notes-for-ios-7-dot-1-beta2/"/>
    <updated>2013-12-17T12:17:22+08:00</updated>
    <id>i-chou.com/blog/2013/12/17/uikit-in-release-notes-for-ios-7-dot-1-beta2</id>
    <content type="html"><![CDATA[<p>Known Issues</p>

<ul>
<li><p>If a <code>UITextField</code> or a <code>UILabel</code> that is baseline aligned with constraints has attributes that change after the constraints have been added, the layout may be incorrect. The exception to this is <code>-setFont:</code> on <code>UILabel</code>, which should work as expected.</p>

<p>  <strong>Workaround:</strong> Avoid making changes in <code>UITextField</code> or <code>UILabel</code> after adding baseline-alignment constraints. If you must make changes, you should remove the constraints and then reapply them afterward. Note that this is a performance hit, so don’t do it unless it is necessary.</p></li>
<li><p>The <code>backIndicatorTransitionMask</code> from a storyboard or a xib will not be interpreted correctly at runtime.</p>

<p>  <strong>Workaround:</strong> Set the <code>backIndicatorTransitionMask</code> in code.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[文本自定义行高以后高度自适应的解决方法]]></title>
    <link href="i-chou.com/blog/2013/12/13/wen-ben-zi-ding-yi-xing-gao-yi-hou-gao-du-zi-gua-ying-de-jie-jue-fang-fa/"/>
    <updated>2013-12-13T00:09:36+08:00</updated>
    <id>i-chou.com/blog/2013/12/13/wen-ben-zi-ding-yi-xing-gao-yi-hou-gao-du-zi-gua-ying-de-jie-jue-fang-fa</id>
    <content type="html"><![CDATA[<p>本文要说的是，<em>Frame高度</em>根据文本内容自适应，而非<code>UITextView</code>的滚动显示哦～（当然不是滚动显示，那属性就是UITextView继承过来直接用的）</p>

<ul>
<li><p>iOS7以前的最佳解决方案：</p>

<p>  自定义TextView继承<code>UITextView</code>并加入以下方法。<em>1.5em</em>可修改</p>

<pre><code>  - (id)styleString {
      return [[super styleString] stringByAppendingString:@"; line-height: 1.5em"];
  }
</code></pre>

<p>  然后在通过下面方法给frame赋值</p>

<pre><code>  CGRect frame = _textView.frame;
  frame.size.height = _textView.contentSize.height;
  _textView.frame = frame;
</code></pre>

<p>  需要注意的是<code>contentSize</code>只在<code>UITextView</code>被<strong>addSubview</strong>以后才有效，所以要先把它加到画面上再，给它一个初始的frame，让它先得以计算出自己的<code>contentSize</code>。</p></li>
<li><p>iOS7的最佳解决方案是：</p>

<p>  自定义TextView继承<code>UITextView</code>实现下面的<code>init</code>方法，给textView设定行高。</p>

<pre><code>  - (id)initWithFrame:(CGRect)frame lineHeigth:(float)lineHeigth font:(UIFont *)font {

       self = [super initWithFrame:frame];
       if (self) {
                    NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc] init];

                    paragraphStyle.lineHeightMultiple = lineHeigth;
                    paragraphStyle.maximumLineHeight = lineHeigth;
                    paragraphStyle.minimumLineHeight = lineHeigth;
                    NSDictionary *ats = 
                               @{NSFontAttributeName:font,NSParagraphStyleAttributeName : paragraphStyle};

                    self.attributedText = [[NSAttributedString alloc] initWithString:@“ “ attributes:ats];
                    self.lineHeight = lineHeigth;
                  }
        return self;
  }
</code></pre>

<p>  然后通过以下方法计算出textView的实际高度，继而确定frame的height。
因为之前有人说<code>UITextView</code>默认的上下左右padding均为8px，也就是下面16的由来。 所以在计算时要考虑进去才能保证文本显示完整。</p>

<pre><code>  + (float) heightForTextView: (UITextView *)textView WithText: (NSString *) strText lineHeight:(float)height
  {
    float fPadding = 16.0;
    CGSize constraint = CGSizeMake(textView.contentSize.width - fPadding, CGFLOAT_MAX);

    CGSize size = [strText sizeWithFont:textView.font
                      constrainedToSize:constraint
                          lineBreakMode:UILineBreakModeWordWrap];

    float fHeight = size.height*height/textView.font.lineHeight + 16.0;
    return fHeight;
  }
</code></pre>

<p>  需要注意的是，本文讲的是自定义行高，所以，在下面方法里加上个<strong>lineHeight</strong>参与计算。</p>

<p>  其实从开发文档看，<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/ApplicationKit/Classes/NSMutableParagraphStyle_Class/Reference/Reference.html">NSMutableParagraphStyle</a> 在iOS6.0及以后都是有效的，但是我不知道为什么在iOS7上计算很精确，在iOS6上，结果却不令人满意。原因仍在调查中。</p>

<p>  不过，幸好有上面说的 &lt;iOS7以前的最佳解决方案> ，要不然就要用&lt;稍微差一点的解决方案>了，那么就顺带说一下&lt;稍微差一点的解决方案>是什么吧^_^</p></li>
<li><p>稍微差一点的解决</p>

<p>  使用开源控件 > <a href="https://github.com/mattt/TTTAttributedLabel">TTTAttributedLabel</a></p>

<p>  这个控件之前由于性能问题一度被我遗弃过，后来版本更新以后，性能上来不少，但是仍然有些bug。我发现的bug就是当<em>字体小于12号，或者当行数过多，并且<strong>lineHeightMultiple</strong>>1</em>的时候，计算高度会存在偏差，行数越多偏差越大。</p>

<p>  那么也就是说，如果你一个文本不需要显示数百行，在此基础上对文本其他属性有追求，并且苦逼的要考虑兼容iOS7以下用户的话，可以使用 <a href="https://github.com/mattt/TTTAttributedLabel">TTTAttributedLabel</a> ，因为这个控件在伴随有 <a href="https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/CustomTextProcessing/CustomTextProcessing.html">Text Kit</a> 的iOS7出来之前还是还是相当牛逼的，而更牛逼的 <a href="https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/CustomTextProcessing/CustomTextProcessing.html">Text Kit</a> 让我们在文本显示领域看见了曙光！顺便奉劝一句，要是你的iOS7用户群达到95%以上，就果断抛弃那些抱着3年前的iPhone4而不敢升级系统的陈旧用户吧。</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
