<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[i-chou's tech blog]]></title>
  <link href="i-chou.com/atom.xml" rel="self"/>
  <link href="i-chou.com/"/>
  <updated>2013-12-07T14:03:28+08:00</updated>
  <id>i-chou.com/</id>
  <author>
    <name><![CDATA[i-chou]]></name>
    <email><![CDATA[ios_develop@me.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android应用开发之（优化布局层次结构）]]></title>
    <link href="i-chou.com/blog/2012/02/07/androidying-yong-kai-fa-zhi-%28you-hua-bu-ju-ceng-ci-jie-gou-%29/"/>
    <updated>2012-02-07T14:00:58+08:00</updated>
    <id>i-chou.com/blog/2012/02/07/androidying-yong-kai-fa-zhi-(you-hua-bu-ju-ceng-ci-jie-gou-)</id>
    <content type="html"><![CDATA[<p>有一个常见的错误看法：只使用基础的布局结构会生产高效的布局。然而，每个您程序中的每个控件和布局都需要初始化、布局位置、和绘制。例如使用嵌套的LinearLayout可以导致很多的层次结构。更严重的是，如果在嵌套的LinearLayout中使用layout_weight参数将会导致更加严重的性能问题，因为里面的控件在计算大小的时候会计算两次。如果在<a href="http://developer.android.com/reference/android/widget/ListView.html">ListView</a> 或者 <a href="http://developer.android.com/reference/android/widget/GridView.html">GridView</a>中使用则会更加严重。</p>

<p>这节课程将会介绍如何使用 <a href="http://developer.android.com/guide/developing/tools/hierarchy-viewer.html">Heirachy Viewer</a> 和<a href="http://developer.android.com/guide/developing/tools/layoutopt.html">Layoutopt</a> 工具来检查和优化布局。</p>

<p>检查布局</p>

<p>在 Android SDK 中包含了一个href=&ldquo;<a href="http://developer.android.com/guide/developing/tools/hierarchy-viewer.html">http://developer.android.com/guide/developing/tools/hierarchy-viewer.html</a>&rdquo;>Heirachy Viewer 工具，使用该工具可以在您的程序运行的时候分析程序的布局。使用该工具来发现布局中的瓶颈所在。</p>

<p>Hierarchy Viewer 让你选择其连接的设备或者模拟器中的一个运行中的程序，然后显示该界面的布局树形结构。在每个控件方块中的交通灯分别代表 计算尺寸(Measure)、布局子控件(Layout)、和绘制的性能，通过颜色来帮助您分析潜在的问题。</p>

<p>例如，下图显示了一个用于 <a href="http://developer.android.com/reference/android/widget/ListView.html">ListView</a>的布局。该布局在左边显示一个小图标，在图标右边显示两行文本内容。当该布局会被多次使用(inflated)到的时候性能问题就比较明显， 比如这个例子 由于这个布局是在ListView中使用的， 所以每个ListView中的一项都会解析下该布局然后绘制出来。</p>

<p><img src="http://m1.img.libdd.com/farm3/d/2012/0202/15/B69AD2A52C25B8A5892A0891C2C54659_B500_900_317_59.PNG"/></p>

<p>hierarchyviewer 工具位于 <sdk>/tools/ 目录。打开后 Hierarchy Viewer 将显示一个可用设备的列表和正在运行的界面。点击 Load View Hierarchy 来查看选中的界面的布局分析结果。例如，下图显示了上面定义的ListView中每一项的布局结果。</p>

<p><img src="http://m2.img.libdd.com/farm3/d/2012/0202/15/8FD77AA2EA1FBDF4D7D1DA76D3E940A7_B500_900_457_235.PNG"/></p>

<p>查看渲染一个View的时间</p>

<p>上面左侧的图中，您可以看到有三层布局结构。在每个方块上面点击可以查看显示该控件所需要的时间。对于需要时间比较长的地方就是我们应该去重点优化的地方。</p>

<p>显示一个列表条目所需要的时间如下：</p>

<p><img src="http://m2.img.libdd.com/farm3/d/2012/0202/15/96F675B3672137311CFAC7B280F4EA9B_B500_900_144_244.PNG"/></p>

<p>Measure: 0.977ms</p>

<p>Layout: 0.167ms</p>

<p>Draw: 2.717ms</p>

<p>改进布局</p>

<p>上面的布局被一个嵌套的 <a href="http://developer.android.com/reference/android/widget/LinearLayout.html">LinearLayout</a> 占用了过多的解析时间，如果把布局的嵌套层次降低可能会提高性能.使用 <a href="http://developer.android.com/reference/android/widget/RelativeLayout.html">RelativeLayout</a> 可以实现这个功能。使用<a href="http://developer.android.com/reference/android/widget/RelativeLayout.html">RelativeLayout</a>后可以看到现在布局由3层变为了2层，分析图如下</p>

<p>使用RelativeLayout后的层次结构</p>

<p><img src="http://m2.img.libdd.com/farm3/d/2012/0202/15/11133BBC926776F3A1730AEA91818EA3_B500_900_376_293.PNG"/></p>

<p>Figure 4. Layout hierarchy for the layout in figure 1,
using <a href="http://developer.android.com/reference/android/widget/RelativeLayout.html">RelativeLayout</a>.</p>

<p>现在显示一个列表条目所需要的时间如下：</p>

<p>Measure: 0.598ms</p>

<p>Layout: 0.110ms</p>

<p>Draw: 2.146ms</p>

<p>看起来是一个很微弱的提升，但是这个时间可以叠加多次，应为每个列表条目在显示的时候都有解析该布局。</p>

<p>当在<a href="http://developer.android.com/reference/android/widget/LinearLayout.html">LinearLayout</a> 中使用 layout_weight 就又不一样了，这样会增加计算控件大小的时间。在使用layout_weight的时候您应该多考虑考虑。</p>

<p>使用 Layoutopt</p>

<p>在您的最终布局文件中运行下 <a href="http://developer.android.com/tools/help/layoutopt.html">layoutopt</a> 工具来看看还有没有可以优化的空间是个很好的习惯。 Layoutopt 工具也位于SDK的 <em>tools/</em> 目录下，您可以用该工具优化单个文件也可以优化一个目录中的所有文件。</p>

<p>当您在单个文件中运行 layoutopt 后，该工具会打印出出现问题的行号和问题的描述，有些问题也会给出优化方案。例如</p>

<pre><code>$ layoutopt samples/
    samples/compound.xml
        7:23 The root-level &lt;FrameLayout/&gt; can be replaced with &lt;merge/&gt;
        11:21 This LinearLayout layout or its FrameLayout parent is useless
    samples/simple.xml
        7:7 The root-level &lt;FrameLayout/&gt; can be replaced with &lt;merge/&gt;
</code></pre>

<p>当你修改了布局文件以后，可以再次运行一下 Hierarchy Viewer 来看看具体提升了多少性能。</p>

<p>from <a href="http://androiddeveloper.diandian.com/post/2012-02-02/16147388">Android Developer</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PC谢幕曲]]></title>
    <link href="i-chou.com/blog/2012/01/27/pcxie-mu-qu/"/>
    <updated>2012-01-27T15:09:14+08:00</updated>
    <id>i-chou.com/blog/2012/01/27/pcxie-mu-qu</id>
    <content type="html"><![CDATA[<p>不久的将来，PC就只有开发人员使用了。</p>

<blockquote><p>科技周报:<br/>
 技术发展不断革新，面对竞争的压力和利润的最大化需求，计算机技术的革新需比市场实际需求发展得更快。当PC的成长速度已无法满足人们日益增长的快捷需求，PC独霸江湖的时代便渐渐逝去，随着带宽的扩大、显示设备的革新、云计算以及应用产品的普及，PC的未来将毫无光景。个人电脑将不再统治数码世界，而是会像智能手机与平板电脑一样，成为众多电子设备之一，并随着时间的推移，渐渐销声匿迹。  PC兴衰史 没有服务器、没有本地化处理、网络不发达的时代，人们在相互交流以及信息汲取方面受到重重阻碍，效率以及准确性受到了严峻考验。而二战时期对信息的紧迫需求大大推动了创造的发展，使得资源可以运用于基本的技术试验，促进了计算机的出现。 伴随着计算机在尖端科学技术与工程设计方面的普遍应用，人们对计算机的性能、容量要求不断提高，在计算机行业，按照技术轨道领先一步推出新型技术产品意味着可能提前占有市场。 然而，市场始终是为需求服务的。综观PC发展史，从发展初期至2000年，由于人们的需求刚刚从书本纸张过渡到本地化信息处理，对于快捷处理的需求日益增长，成就了个人电脑的辉煌历史，使得台式计算机成为主导PC市场成败的关键。 而随着互联网的发展，人们对于解决信息处理方面的要求，从传统的台式机逐渐演变到满足交互体验的任意电子产品上，繁杂冗余的大体积台式机毛利润越来越低，陷入了低价化困境。 在巨大压力下，Intel积极开发低耗电处理器，PC市场从原本的台式机时代逐步转移至笔记本电脑时代，而基于云服务的出现，人们对信息加工的需求不再需要经过本地处理，更轻便的过渡产品便成为了引领潮流的先驱，使得笔记本也逃不过低价化的命运，整个PC行业逐渐步入阴霾。  移动终端——过渡产品 所谓过渡产品，既是说包括手机及平板电脑等终端产品，在信息加工方面已经可以逐步代替PC的本地化处理功能，但由于过渡产品仍不能完全满足今后科技对于低成本高效率的信息需求，只是基于其低廉的价格优势以及轻便的体积，成为更多消费者愿意选择的产品。 随着3G网络的大势兴起，3G手机与智能手机的逐步革新，平板电脑不断洗牌，智能终端已经成为当下最潮最热的流行趋势。不难看出，智能操作系统的兴起使得手机退化为终端载体，而生产厂商为了实现差异化竞争，只能在硬件技术上进行提升，降低成本以保证消费者市场。 选择是复杂的，不仅包括技术的先进性，还包括了社会的认同和接受。 对多数消费者来说，轻便装备不但可满足他们上网与玩电子游戏的需求，也是节省时间方便出行的必备工具;而对企业来说，iPad与iPhone等亦足以胜任作简报、工作会议等工作需要;对社会来说，耗能越少越低碳，不但可以节约能源与资源，还能减缩大量废弃电子产品的处理成本。 从企业来看，微软决定让Windows操作系统兼容ARM架构的处理器，也就是说英特尔如今已无法巩固其在PC业的主导地位，ARM在移动芯片的主宰地位更不是英特尔一朝一夕能颠覆的，这预示着长久以来占据市场主导地位的Wintel联盟(Windows+Intel)不再能驱动PC成长。  PC之劫 经济危机带来的影响加速了整个PC行业的利润率下滑，而用户和市场同时决定了计算机技术的发展，在市场判定规则一定的情况下，技术优越者取胜，使得经济之间的竞争转化为技术之间的竞争。随着PC市场的下滑，制造商整合将成为行业更常见的趋势。 2005年IBM将PC业务卖给联想，从PC制造商转型为最大的高端服务提供商，现在看来此举无疑是具有远见卓识的一步。近日，联想整合NEC、收购德国Medion，惠普放出分拆或者出售PC业务的消息，方正集团将PC业务出售给宏公司，戴尔也对外宣称业务中心从PC走向其他领域。众多的产业格局变化都反映了过去以PC为主的厂商想要摆脱走向衰亡的命运。 举例来说，惠普近几年来一直稳坐个人电脑业务头把交椅，在利润率低下已经成为当下整个PC行业不争事实的前提下，惠普做出分拆PC业务的决定，实际上已经等于给这个产业划上了休止符。尽管惠普最终反悔决策表示将继续保留PC业务，但初衷并不是认为PC业务还有未来，只不过因为无法承担分拆成本过高造成的负担。  后PC时代 如今，PC仍旧在市场占有一席之地，因为目前就技术而言，PC在部分层面上占有一定优势。首先，带宽技术的不理想，特别是无线资费的高昂以及带宽的限制，使得需要进行大数量处理的信息技术仍要靠PC来完成。 其次，显示设备的局限性，消费者要享受高质量的视听需求，相比手机与平板电脑，PC仍然是看视频看电影的首选。此外，交互体验的需求也是部分高端玩家选择PC的主要原因之一。 最后，云端建设的不完善，许多存储信息需要靠PC的硬盘完成，而处理器匹配等也是目前尚在开发阶段的问题。 由此看来，今后的计算机技术若是完成了云构架的完善、带宽的革新以及显示设备的提升 ，PC产业必将消亡。到时人们需要的只是一个轻便的操作设备与显示设备，通过云端设备提供强大的运算能力和信息平台，便可完成所有信息处理功能。 就企业而言，随着PC重要性的下降，必会造成数字世界中的权利分配从终端用户和软件开发者向操作系统厂商发生转移。 除了云建设以外，应用程序商店与社交媒体的地位逐步上升，将让原本PC时代以硬件规格定胜负的游戏规则，逐步转为这三项服务与其他阵营之间的差异化大战。这可以推算出与其吊死在PC这一根无利可图的大树上，企业为寻求出路会向操作系统发展。改变组织结构、创立软件与创新服务部门，或者以快速并购方式弥补营运缺点等，都是各企业目前在寻觅的生存规则。 后PC时代的到来伴随着业务的整合、应用的拓展以及云端设备提供的强大运算能力和信息平台，那个单纯靠硬件打拼的时代已不复存在。如同恩格尔·巴特所说，今后的计算机技术将建立在共享信息的基础上，这也是科学技术进步的关键，因为基于新平台的信息交互可以使创造活动的时效性与质量得到有效提高，满足信息时代的处理要求。 综上所述，PC会经历一个慢慢消亡的过程，从主导市场变为与智能终端产品并列而存，随着云建设的崛起以及目前已经着手改良的带宽与网络资费问题，PC将在不久的未来逐步退出历史舞台。</p></blockquote>
]]></content>
  </entry>
  
</feed>
